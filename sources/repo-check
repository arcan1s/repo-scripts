#!/bin/bash
#     repo-scripts is a set of scripts to work with your repository
#     Copyright (C) 2014 Evgeniy Alekseev
#
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, see http://www.gnu.org/licenses
#     or write to the Free Software Foundation,Inc., 51 Franklin Street,
#     Fifth Floor, Boston, MA 02110-1301  USA


# functions
error_mes() {
  if [ ${USECOLOR} == "yes" ]; then
    _red='\e[0;31m'
    _bwhite='\e[1;37m'
    _cclose='\e[0m'
  fi
  case "$1" in
    "config"    ) echo "${_red}[EE] ${_bwhite}Configuration file is not set${_cclose}"                   ;;
    "file"      ) echo "${_red}[EE] ${_bwhite}'$2' is a file${_cclose}"                                  ;;
    "flag"      ) echo "${_red}[EE] ${_bwhite}Unknown flag${_cclose}"                                    ;;
    "unknown"   ) echo "${_red}[EE] ${_bwhite}Unknown error${_cclose}"                                   ;;
  esac
  exit 1
}
func_help() {
  echo -e "Script written on BASH for checking packages for updates"
  echo -e "\nUsage: repo-check [ -c /etc/repo-scripts.conf ] [ -s ] [ -v | --version ] [ -h | --help ]"
  echo -e "\nParametrs:"
  echo -e "  -c               PATH     - path to configuration file. Default is
                              '/etc/repo-scripts.conf'"
  echo -e "  -s                        - only show status and exit"
  echo -e "\n  -v   --version            - show version and exit"
  echo -e "  -h   --help               - show this help and exit"
  exit 0
}
func_ver() {
  echo -e "                                   repo-check                                   "
  echo -e "A set of scripts to work with your repository                                   "
  echo -e "Version : 1.3.1                                                  License : GPLv3"
  echo -e "Author :                                             Evgeniy Alexeev aka arcanis"
  echo -e "E-mail :                                          esalexeev (at) gmail (dot) com"
  exit 0
}
func_update() {
  if [ ${USECOLOR} == "yes" ]; then
    _bred='\e[1;31m'
    _bgreen='\e[1;32m'
    _byellow='\e[1;33m'
    _bblue='\e[1;34m'
    _bwhite='\e[1;37m'
    _cclose='\e[0m'
  fi
  _PKGNAME="$1"
  _PKGVER="$2"
  _REPODIR="$3"

  echo -e "${_bwhite}[II] ${_bblue}=>${_cclose} Checking ${_bwhite}${_PKGNAME}${_cclose}"
  if [[ "${_PKGNAME}" =~ -bzr|-git|-hg|-svn ]]; then
    echo -e "${_bwhite}[II] ${_byellow}${_PKGNAME} is VCS package${_cclose}"
    return 1
  fi
  NEWVER=$(/usr/bin/package-query -A -f %V "${_PKGNAME}")
  if [ -z "${NEWVER}" ]; then
    echo -e "${_bwhite}[II] ${_byellow}${_PKGNAME} is not found${_cclose}"
    return 1
  fi
  case "$(/usr/bin/vercmp ${_PKGVER} ${NEWVER})" in
    "0"  ) echo -e "${_bwhite}[II] ${_bgreen}${_PKGNAME} is up-to-date${_cclose}"     ;;
    "-1" ) echo -e "${_bwhite}[II] ${_bred}${_PKGNAME} is out-of-date${_cclose}" && \
           /usr/bin/yaourt -G aur/${_PKGNAME} --noconfirm &> /dev/null                ;;
    "1"  ) echo -e "${_bwhite}[II] ${_byellow}${_PKGNAME} is newer than in AUR${_cclose}"     ;;
  esac
}

CONF_FILE="/etc/repo-scripts.conf"
SHOW_ONLY="no"
# parametrs parsing
until [ -z $1 ]; do
  case "$1" in
    "-h" | "--help"    ) func_help                                                    ;;
    "-v" | "--version" ) func_ver                                                     ;;
    "-c"               ) [ -z "$2" ] && error_mes "config" || CONF_FILE="$2" && shift ;;
    "-s"               ) SHOW_ONLY="yes"                                              ;;
    *                  ) error_mes "flag"                                             ;;
  esac
  shift
done
# default values
IGNORELIST=""
REPODIR="${HOME}/arch/repo"
STAGINGDIR="${HOME}/arch/staging/"
USECOLOR="yes"
echo -e "[II] Reading configuration from '${CONF_FILE}'"
. "${CONF_FILE}"
if [ ${USECOLOR} == "yes" ]; then
  bblue='\e[1;34m'
  bwhite='\e[1;37m'
  cclose='\e[0m'
fi
export USECOLOR

# error checking
if [ ! -d "${REPODIR}" ]; then
  [ -e "${REPODIR}" ] && error_mes "file" "${REPODIR}"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${REPODIR}'${cclose}"
  /usr/bin/mkdir -p "${REPODIR}/"{i686,x86_64} || error_mes "unknown"
fi
if [ ! -d "${REPODIR}/i686" ]; then
  [ -e "${REPODIR}/i686" ] && error_mes "file" "${REPODIR}/i686"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${REPODIR}/i686'${cclose}"
  /usr/bin/mkdir -p "${REPODIR}/i686" || error_mes "unknown"
fi
if [ ! -d "${REPODIR}/x86_64" ]; then
  [ -e "${REPODIR}/x86_64" ] && error_mes "file" "${REPODIR}/x86_64"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${REPODIR}/x86_64'${cclose}"
  /usr/bin/mkdir -p "${REPODIR}/x86_64" || error_mes "unknown"
fi
if [ ! -d "${STAGINGDIR}" ]; then
  [ -e "${STAGINGDIR}" ] && error_mes "file" "${STAGINGDIR}"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${STAGINGDIR}'${cclose}"
  /usr/bin/mkdir -p "${STAGINGDIR}" || error_mes "unknown"
fi


## work block
IGNORELIST=$(echo "${IGNORELIST}" | sed "s/;;/\\\|/g")
# update database
echo -e "${bwhite}[II]${cclose} Updating local database"
/usr/bin/yaourt -Sy
# get list
echo -e "${bwhite}[II]${cclose} Getting list of packages"
/usr/bin/rm -f "${STAGINGDIR}/pkglist"
cd "${REPODIR}/i686"
/usr/bin/find . -name '*.pkg.tar.xz' | /usr/bin/grep -v "$IGNORELIST" | /usr/bin/cut -c 3- >> "${STAGINGDIR}/pkglist"
cd "${REPODIR}/x86_64"
/usr/bin/find . -name '*.pkg.tar.xz' | /usr/bin/grep -v "$IGNORELIST" | /usr/bin/cut -c 3- >> "${STAGINGDIR}/pkglist"

# work block
echo -e "${bwhite}[II]${cclose} Checking packages"
cd "${STAGINGDIR}"
for PACKAGE in $(/usr/bin/cat pkglist); do
  if [[ "${PACKAGE}" =~ -i686.pkg.tar.xz$|-any.pkg.tar.xz$ ]]; then
    PKGNAME=$(/usr/bin/package-query -p -f %n "${REPODIR}/i686/${PACKAGE}")
    PKGVER=$(/usr/bin/package-query -p -f %V "${REPODIR}/i686/${PACKAGE}")
  else
    PKGNAME=$(/usr/bin/package-query -p -f %n "${REPODIR}/x86_64/${PACKAGE}")
    PKGVER=$(/usr/bin/package-query -p -f %V "${REPODIR}/x86_64/${PACKAGE}")
  fi
  func_update "${PKGNAME}" "${PKGVER}" "${REPODIR}"
done
/usr/bin/rm -f "${STAGINGDIR}/pkglist"

# check for updates
echo -e "${bwhite}[II]${cclose} Check for updates"
cd "${STAGINGDIR}"
if [[ $(/usr/bin/find . -type d | /usr/bin/wc -l) > 1 ]]; then
  if [[ "${SHOW_ONLY}" == "yes" ]]; then
    echo -e "${bwhite}[II]${cclose} Packages:"
    for PACKAGE in $(/usr/bin/find . -type d); do
      echo -e "${_bwhite}[II] ${_bblue}=>${_cclose} ${PACKAGE}"
    done
    exit 0
  fi
  /usr/bin/repo-update -c "${CONF_FILE}"
fi
