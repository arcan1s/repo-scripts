#!/bin/bash
#     repo-scripts is a set of scripts to work with your repository
#     Copyright (C) 2014 Evgeniy Alekseev
#
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, see http://www.gnu.org/licenses
#     or write to the Free Software Foundation,Inc., 51 Franklin Street,
#     Fifth Floor, Boston, MA 02110-1301  USA


# functions
error_mes() {
  if [ ${USECOLOR} == "yes" ]; then
    red='\e[0;31m'
    bwhite='\e[1;37m'
    cclose='\e[0m'
  fi
  case "$1" in
    "config"    ) echo "${red}[EE] ${bwhite}Configuration file is not set${cclose}"                   ;;
    "file"      ) echo "${red}[EE] ${bwhite}'$2' is a file${cclose}"                                  ;;
    "flag"      ) echo "${red}[EE] ${bwhite}Unknown flag${cclose}"                                    ;;
    "unknown"   ) echo "${red}[EE] ${bwhite}Unknown error${cclose}"                                   ;;
  esac
  exit 1
}
func_help() {
  echo -e "Script written on BASH for update custom repository"
  echo -e "\nUsage: repo-update [ -c /etc/repo-scripts.conf ] [ -v | --version ] [ -h | --help ]"
  echo -e "\nParametrs:"
  echo -e "  -c               PATH     - path to configuration file. Default is
                              '/etc/repo-scripts.conf'"
  echo -e "\n  -v   --version            - show version and exit"
  echo -e "  -h   --help               - show this help and exit"
  exit 0
}
func_ver() {
  echo -e "                                   repo-update                                  "
  echo -e "A set of scripts to work with your repository                                   "
  echo -e "Version : 1.1.2                                                  License : GPLv3"
  echo -e "Author :                                             Evgeniy Alexeev aka arcanis"
  echo -e "E-mail :                                          esalexeev (at) gmail (dot) com"
  exit 0
}
func_remove() {
  PKGNAME="$1"
  /usr/bin/rm -f ${PKGNAME}-[0-9]*
}
export -f func_remove
func_build() {
  PREPARE="$1"
  ROOT="$2"
  eval $(/usr/bin/grep 'arch=' PKGBUILD)
  if echo ${arch} | /usr/bin/grep any -q; then
    LC_MESSAGES=C /usr/bin/sudo /usr/bin/staging-i686-build -r "${ROOT}" -c
  else
    eval $(/usr/bin/grep 'pkgname=' PKGBUILD)
    if echo ${pkgname} | /usr/bin/grep lib32 -q; then
      LC_MESSAGES=C /usr/bin/sudo /usr/bin/multilib-staging-build -r "${ROOT}" -c
    else
      if /usr/bin/grep "lib32" PKGBUILD -q; then
        LC_MESSAGES=C /usr/bin/sudo /usr/bin/staging-i686-build -r "${ROOT}" -c
        LC_MESSAGES=C /usr/bin/sudo /usr/bin/multilib-staging-build -r "${ROOT}" -c
      else
        LC_MESSAGES=C /usr/bin/sudo /usr/bin/staging-i686-build -r "${ROOT}" -c
        LC_MESSAGES=C /usr/bin/sudo /usr/bin/staging-x86_64-build -r "${ROOT}" -c
      fi
    fi
  fi
  /usr/bin/cp *.pkg.tar.xz "${PREPARE}"
}
export -f func_build

CONF_FILE="/etc/repo-scripts.conf"
# parametrs parsing
until [ -z $1 ]; do
  case "$1" in
    "-h" | "--help"    ) func_help                                                    ;;
    "-v" | "--version" ) func_ver                                                     ;;
    "-c"               ) [ -z "$2" ] && error_mes "config" || CONF_FILE="$2" && shift ;;
    *                  ) error_mes "flag"                                             ;;
  esac
  shift
done
# default values
DBNAME="custom"
PREPAREDIR="${HOME}/arch/prepare"
REPODIR="${HOME}/arch/repo"
ROOTDIR="${HOME}/arch/root"
STAGINGDIR="${HOME}/arch/staging/"
USECOLOR="yes"
USEGPG="yes"
echo -e "[II] Reading configuration from '${CONF_FILE}'"
. "${CONF_FILE}"
if [ ${USECOLOR} == "yes" ]; then
  black='\e[0;30m'
  bblack='\e[1;30m'
  red='\e[0;31m'
  bred='\e[1;31m'
  green='\e[0;32m'
  bgreen='\e[1;32m'
  yellow='\e[0;33m'
  byellow='\e[1;33m'
  blue='\e[0;34m'
  bblue='\e[1;34m'
  purple='\e[0;35m'
  bpurple='\e[1;35m'
  cyan='\e[0;36m'
  bcyan='\e[1;36m'
  white='\e[0;37m'
  bwhite='\e[1;37m'
  cclose='\e[0m'
fi
export USECOLOR

# error checking
if [ ! -d "${PREPAREDIR}" ]; then
  [ -e "${PREPAREDIR}" ] && error_mes "file" "${PREPAREDIR}"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${PREPAREDIR}'${cclose}"
  mkdir -p "${PREPAREDIR}" || error_mes "unknown"
fi
if [ ! -d "${REPODIR}" ]; then
  [ -e "${REPODIR}" ] && error_mes "file" "${REPODIR}"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${REPODIR}'${cclose}"
  mkdir -p "${REPODIR}/"{i686,x86_64} || error_mes "unknown"
fi
if [ ! -d "${REPODIR}/i686" ]; then
  [ -e "${REPODIR}/i686" ] && error_mes "file" "${REPODIR}/i686"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${REPODIR}/i686'${cclose}"
  mkdir -p "${REPODIR}/i686" || error_mes "unknown"
fi
if [ ! -d "${REPODIR}/x86_64" ]; then
  [ -e "${REPODIR}/x86_64" ] && error_mes "file" "${REPODIR}/x86_64"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${REPODIR}/x86_64'${cclose}"
  mkdir -p "${REPODIR}/x86_64" || error_mes "unknown"
fi
if [ ! -d "${STAGINGDIR}" ]; then
  [ -e "${STAGINGDIR}" ] && error_mes "file" "${STAGINGDIR}"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${STAGINGDIR}'${cclose}"
  mkdir -p "${STAGINGDIR}" || error_mes "unknown"
fi


## work block
# building
echo -e "${bwhite}[II]${cclose} Building packages"
cd "${STAGINGDIR}"
/usr/bin/find -name 'PKGBUILD' -type f -execdir /usr/bin/bash -c "func_build "${PREPAREDIR}" "${ROOTDIR}"" \;

# signing
if [ ${USEGPG} == "yes" ]; then
  echo -e "${bwhite}[II]${cclose} Signing"
  cd "${PREPAREDIR}"
  for PACKAGE in $(/usr/bin/find . -name '*.pkg.tar.xz'); do
    /usr/bin/gpg -b ${PACKAGE}
  done
fi

# creating packages list
cd "${PREPAREDIR}"
i686_PACKAGES=$(/usr/bin/find * -name '*-i686.pkg.tar.xz' -o -name '*-any.pkg.tar.xz')
x86_64_PACKAGES=$(/usr/bin/find * -name '*-x86_64.pkg.tar.xz' -o -name '*-any.pkg.tar.xz')
echo -e "${bwhite}[II] ${bblue}=>${cclose} i686 packages: \n${bwhite}${i686_PACKAGES}${cclose}"
echo -e "${bwhite}[II] ${bblue}=>${cclose} x86_64 packages: \n${bwhite}${x86_64_PACKAGES}${cclose}"

# updating i686 repo
echo -e "${bwhite}[II]${cclose} Updating ${bwhite}i686${cclose} repo"
cd "${REPODIR}/i686"
for PACKAGE in ${i686_PACKAGES}; do
  PKGNAME=$(echo ${PACKAGE} | /usr/bin/awk -F '-' '{for(i=1; i<=NF-3;i++) {printf("%s-", $i);}}' | /usr/bin/sed 's/.$//')
  /usr/bin/find -name "${PKGNAME}*.pkg.tar.xz" -type f -exec /usr/bin/bash -c "func_remove "${PKGNAME}"" \;
  /usr/bin/cp "${PREPAREDIR}/${PACKAGE}" .
  [ ${USEGPG} == "yes" ] && /usr/bin/cp "${PREPAREDIR}/${PACKAGE}.sig" .
  /usr/bin/repo-add --new ${DBNAME}.db.tar.gz "${PACKAGE}"
  /usr/bin/repo-add --new --files ${DBNAME}.files.tar.gz "${PACKAGE}"
done

# updating x86_64 repo
echo -e "${bwhite}[II]${cclose} Updating ${bwhite}x86_64${cclose} repo"
cd "${REPODIR}/x86_64"
for PACKAGE in ${x86_64_PACKAGES}; do
  PKGNAME=$(echo ${PACKAGE} | /usr/bin/awk -F '-' '{for(i=1; i<=NF-3;i++) {printf("%s-", $i);}}' | /usr/bin/sed 's/.$//')
  /usr/bin/find -name "${PKGNAME}"'*.pkg.tar.xz' -type f -exec /usr/bin/bash -c "func_remove "${PKGNAME}"" \;
  /usr/bin/cp "${PREPAREDIR}/${PACKAGE}" .
  [ ${USEGPG} == "yes" ] && /usr/bin/cp "${PREPAREDIR}/${PACKAGE}.sig" .
  /usr/bin/repo-add --new ${DBNAME}.db.tar.gz "${PACKAGE}"
  /usr/bin/repo-add --new --files ${DBNAME}.files.tar.gz "${PACKAGE}"
done

# clear
echo -e "${bwhite}[II]${cclose} Clear"
cd "${PREPAREDIR}"
/usr/bin/rm -rf *
cd "${STAGINGDIR}"
/usr/bin/rm -rf *
