#!/bin/bash
#     repo-scripts is a set of scripts to work with your repository
#     Copyright (C) 2014 Evgeniy Alekseev
#
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, see http://www.gnu.org/licenses
#     or write to the Free Software Foundation,Inc., 51 Franklin Street,
#     Fifth Floor, Boston, MA 02110-1301  USA


# functions
error_mes() {
  if [[ ${USECOLOR} == "yes" ]]; then
    local _red='\e[0;31m'
    local _bwhite='\e[1;37m'
    local _cclose='\e[0m'
  fi
  case "${1}" in
    "config"    ) echo "${_red}[EE] ${_bwhite}Configuration file is not set${_cclose}" ;;
    "file"      ) echo "${_red}[EE] ${_bwhite}'${2}' is a file${_cclose}"              ;;
    "flag"      ) echo "${_red}[EE] ${_bwhite}Unknown flag${_cclose}"                  ;;
    "unknown"   ) echo "${_red}[EE] ${_bwhite}Unknown error${_cclose}"                 ;;
  esac
  exit 1
}
func_help() {
  echo -e "Script written on BASH for checking packages for updates"
  echo -e "\nUsage: repo-check [ -c /etc/repo-scripts.conf ] [ --nocolor ] [ -s ] [ --vcs ]"
  echo -e "                  [ -v | --version ] [ -h | --help ]"
  echo -e "\nParametrs:"
  echo -e "  -c               PATH     - path to configuration file. Default is
                              '/etc/repo-scripts.conf'"
  echo -e "       --nocolor            - force disable colors"
  echo -e "  -s                        - only show status and exit"
  echo -e "       --vcs                - check VCS packages"
  echo -e "\n  -v   --version            - show version and exit"
  echo -e "  -h   --help               - show this help and exit"
  exit 0
}
func_ver() {
  echo -e "                                   repo-check                                   "
  echo -e "A set of scripts to work with your repository                                   "
  echo -e "Version : 1.6.1                                                  License : GPLv3"
  echo -e "Author :                                             Evgeniy Alexeev aka arcanis"
  echo -e "E-mail :                                          esalexeev (at) gmail (dot) com"
  exit 0
}
func_update() {
  if [[ ${USECOLOR} == "yes" ]]; then
    local _bred='\e[1;31m'
    local _bgreen='\e[1;32m'
    local _byellow='\e[1;33m'
    local _bblue='\e[1;34m'
    local _bwhite='\e[1;37m'
    local _cclose='\e[0m'
  fi
  local _PKGNAME="${1}"
  local _PKGVER="${2}"
  local _REPODIR="${3}"
  local _VCSDIR="${4}"

  echo -e "${_bwhite}[II] ${_bblue}=>${_cclose} Checking ${_bwhite}${_PKGNAME}${_cclose}"
  if [[ ${_PKGNAME} =~ -bzr$|-git$|-hg$|-svn$ ]]; then
    if [[ ${CHECK_VCS} == "no" ]]; then
      echo -e "${_bwhite}[II] ${_byellow}${_PKGNAME} is VCS package${_cclose}"
      return 1
    fi
    func_check_vcs "${_PKGNAME}" "${_PKGVER}" "${_VCSDIR}"
    if [ -d "${_PKGNAME}" ]; then
      echo -e "${_bwhite}[II] ${_bred}${_PKGNAME} is out-of-date${_cclose}"
    else
      echo -e "${_bwhite}[II] ${_bgreen}${_PKGNAME} is up-to-date${_cclose}"
    fi
    return 0
  fi
  NEWVER=$(/usr/bin/package-query -A -f %V "${_PKGNAME}")
  if [ -z "${NEWVER}" ]; then
    echo -e "${_bwhite}[II] ${_byellow}${_PKGNAME} is not found${_cclose}"
    return 1
  fi
  case "$(/usr/bin/vercmp "${_PKGVER}" "${NEWVER}")" in
    "0"  ) echo -e "${_bwhite}[II] ${_bgreen}${_PKGNAME} is up-to-date${_cclose}"         ;;
    "-1" ) echo -e "${_bwhite}[II] ${_bred}${_PKGNAME} is out-of-date${_cclose}" && \
           /usr/bin/yaourt -G "aur/${_PKGNAME}" --noconfirm &> /dev/null                  ;;
    "1"  ) echo -e "${_bwhite}[II] ${_byellow}${_PKGNAME} is newer than in AUR${_cclose}" ;;
  esac
}
func_check_vcs() {
  local _PKGNAME="${1}"
  local _PKGVER="${2}"
  local _VCSDIR="${3}"
  local _STAGINGDIR="$(pwd)"
  # get sources
  cd "${_VCSDIR}"
  /usr/bin/yaourt -G "aur/${_PKGNAME}" --noconfirm &> /dev/null
  pushd "${_PKGNAME}" 1> /dev/null
  /usr/bin/makepkg --nobuild --nodeps --noprogressbar 2> /dev/null
  # get version
  local srcdir="src"
  source "PKGBUILD"
  local _NEWVER="$(pkgver)-${pkgrel}"
  popd 1> /dev/null
  # check
  [[ ${_PKGVER} == ${_NEWVER} ]] || /usr/bin/cp -r "${_PKGNAME}" "${_STAGINGDIR}"
  cd "${_STAGINGDIR}"
}

CHECK_VCS="no"
CMD_NOCOLOR="no"
CONF_FILE="/etc/repo-scripts.conf"
SHOW_ONLY="no"
# parametrs parsing
until [ -z "${1}" ]; do
  case "${1}" in
    "-h" | "--help"    ) func_help                                                        ;;
    "-v" | "--version" ) func_ver                                                         ;;
    "-c"               ) [ -z "${2}" ] && error_mes "config" || CONF_FILE="${2}" && shift ;;
    "--nocolor"        ) CMD_NOCOLOR="yes"                                                ;;
    "-s"               ) SHOW_ONLY="yes"                                                  ;;
    "--vcs"            ) CHECK_VCS="yes"                                                  ;;
    *                  ) error_mes "flag"                                                 ;;
  esac
  shift
done
# default values
ARCHS="i686 x86_64"
IGNORELIST=""
REPODIR="${HOME}/arch/repo"
STAGINGDIR="${HOME}/arch/staging"
VCSDIR="${HOME}/arch/vcs"
USECOLOR="yes"
echo -e "[II] Reading configuration from '${CONF_FILE}'"
source "${CONF_FILE}"
[[ ${CMD_NOCOLOR} == "yes" ]] && USECOLOR="no"
if [[ ${USECOLOR} == "yes" ]]; then
  bblue='\e[1;34m'
  bwhite='\e[1;37m'
  cclose='\e[0m'
fi
export USECOLOR
export CHECK_VCS

# error checking
if [ ! -d "${REPODIR}" ]; then
  [ -e "${REPODIR}" ] && error_mes "file" "${REPODIR}"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${REPODIR}'${cclose}"
  /usr/bin/mkdir -p "${REPODIR}" || error_mes "unknown"
fi
for ARCH in ${ARCHS}; do
  if [ ! -d "${REPODIR}/${ARCH}" ]; then
    [ -e "${REPODIR}/${ARCH}" ] && error_mes "file" "${REPODIR}/${ARCH}"
    echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${REPODIR}/${ARCH}'${cclose}"
    /usr/bin/mkdir -p "${REPODIR}/${ARCH}" || error_mes "unknown"
  fi
done
if [ ! -d "${STAGINGDIR}" ]; then
  [ -e "${STAGINGDIR}" ] && error_mes "file" "${STAGINGDIR}"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${STAGINGDIR}'${cclose}"
  /usr/bin/mkdir -p "${STAGINGDIR}" || error_mes "unknown"
fi
if [ ! -d "${VCSDIR}" ]; then
  [ -e "${VCSDIR}" ] && error_mes "file" "${VCSDIR}"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${VCSDIR}'${cclose}"
  /usr/bin/mkdir -p "${VCSDIR}" || error_mes "unknown"
fi


## work block
#
if [ -z "${IGNORELIST}" ]; then
  IGNORELIST="<>"
else
  IGNORELIST=$(echo "${IGNORELIST}" | sed "s/;;/ /g")
fi
# Update database
echo -e "${bwhite}[II]${cclose} Updating local database"
/usr/bin/sudo /usr/bin/pacman -Sy
# Get list
echo -e "${bwhite}[II]${cclose} Getting list of packages"
for ARCH in ${ARCHS}; do
  cd "${REPODIR}/${ARCH}"
  ARCHLIST=$(/usr/bin/find . -name '*.pkg.tar.xz' | /usr/bin/grep -v "${IGNORELIST}" | /usr/bin/cut -c 3- )
  cd "${STAGINGDIR}"
  for PACKAGE in ${ARCHLIST[@]}; do
    PKGNAME=$(/usr/bin/package-query -p -f %n "${REPODIR}/${ARCH}/${PACKAGE}")
    PKGVER=$(/usr/bin/package-query -p -f %V "${REPODIR}/${ARCH}/${PACKAGE}")
    echo -e "${bwhite}[II] ${bblue}=>${cclose} Checking ${bwhite}${PKGNAME}${cclose} in ${bwhite}${ARCH}${cclose} repo"
    func_update "${PKGNAME}" "${PKGVER}" "${REPODIR}" "${VCSDIR}"
  done
done

# check for updates
echo -e "${bwhite}[II]${cclose} Check for updates"
cd "${STAGINGDIR}"
if [[ $(/usr/bin/find . -type d) ]]; then
  if [[ ${SHOW_ONLY} == "yes" ]]; then
    echo -e "${bwhite}[II]${cclose} Packages:"
    for PACKAGE in $(/usr/bin/find . -type d); do
      echo -e "${_bwhite}[II] ${_bblue}=>${_cclose} ${PACKAGE}"
    done
  else
    [[ ${CMD_NOCOLOR} == "yes" ]] && /usr/bin/repo-update --nocolor -c "${CONF_FILE}" || /usr/bin/repo-update -c "${CONF_FILE}"
  fi
fi
