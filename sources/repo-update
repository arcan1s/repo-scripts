#!/bin/bash
#     repo-scripts is a set of scripts to work with your repository
#     Copyright (C) 2014 Evgeniy Alekseev
#
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, see http://www.gnu.org/licenses
#     or write to the Free Software Foundation,Inc., 51 Franklin Street,
#     Fifth Floor, Boston, MA 02110-1301  USA


# functions
error_mes() {
  if [ "${USECOLOR}" == "yes" ]; then
    local _red='\e[0;31m'
    local _bwhite='\e[1;37m'
    local _cclose='\e[0m'
  fi
  case "${1}" in
    "config"    ) echo "${_red}[EE] ${_bwhite}Configuration file is not set${_cclose}"  ;;
    "file"      ) echo "${_red}[EE] ${_bwhite}'${2}' is a file${_cclose}"               ;;
    "flag"      ) echo "${_red}[EE] ${_bwhite}Unknown flag${_cclose}"                   ;;
    "lock"      ) echo "${_red}[EE] ${_bwhite}The process is already running${_cclose}" ;;
    "unknown"   ) echo "${_red}[EE] ${_bwhite}Unknown error${_cclose}"                  ;;
  esac
  exit 1
}
func_help() {
  echo -e "Script written on BASH for update custom repository"
  echo -e "\nUsage: repo-update [ -c /etc/repo-scripts.conf ] [ --nocolor ] [ -f | --force ]"
  echo -e "                                            [ -v | -- version ] [ -h | --help ]"
  echo -e "\nParametrs:"
  echo -e "  -c               PATH     - path to configuration file. Default is
                              '/etc/repo-scripts.conf'"
  echo -e "       --nocolor            - force disable colors"
  echo -e "  -f   --force              - force if lock file exist"
  echo -e "\n  -v   --version            - show version and exit"
  echo -e "  -h   --help               - show this help and exit"
  exit 0
}
func_ver() {
  echo -e "                                   repo-update                                  "
  echo -e "A set of scripts to work with your repository                                   "
  echo -e "Version : 1.5.3                                                  License : GPLv3"
  echo -e "Author :                                             Evgeniy Alexeev aka arcanis"
  echo -e "E-mail :                                          esalexeev (at) gmail (dot) com"
  exit 0
}

func_remove() {
  local _PACKAGE="${1}"
  /usr/bin/rm -f "${_PACKAGE}"{,.sig}
}

REPOx86=false;
REPOx64=false;

#Check repo archs
func_check_archs() {
	for ARCH in ${ARCHS}; do
		if [ "$ARCH" = "i686" ]; then
			REPOx86=true;
		fi;
		if [ "$ARCH" = "x86_64" ]; then
			REPOx64=true;
		fi;
	done;
}

export -f func_check_archs;

func_build() {
  if [ "${USECOLOR}" == "yes" ]; then
    local _bblue='\e[1;34m'
    local _bwhite='\e[1;37m'
    local _cclose='\e[0m'
  fi
  local _PREPAREDIR="${1}"
  local _ROOTDIR="${2}"
  source PKGBUILD
  echo -e "${_bwhite}[II] ${_bblue}=>${_cclose} Building ${_bwhite}${pkgname}${_cclose}"
  if [[ ${arch} =~ any ]]; then
    LC_MESSAGES=C /usr/bin/sudo /usr/bin/extra-i686-build -r "${_ROOTDIR}" -c
  else
    if [[ ${pkgname} =~ lib32 ]]; then
      LC_MESSAGES=C /usr/bin/sudo /usr/bin/multilib-build -r "${_ROOTDIR}" -c
    else
      if /usr/bin/grep 'lib32' PKGBUILD -q; then
        LC_MESSAGES=C /usr/bin/sudo /usr/bin/extra-i686-build -r "${_ROOTDIR}" -c
        LC_MESSAGES=C /usr/bin/sudo /usr/bin/multilib-build -r "${_ROOTDIR}" -c
      else
        LC_MESSAGES=C /usr/bin/sudo /usr/bin/extra-i686-build -r "${_ROOTDIR}" -c
        LC_MESSAGES=C /usr/bin/sudo /usr/bin/extra-x86_64-build -r "${_ROOTDIR}" -c
      fi
    fi
  fi
  /usr/bin/cp *.pkg.tar.xz "${_PREPAREDIR}" 2> /dev/null
}

#export -f func_build

func_build_new() {
	if [ "${USECOLOR}" == "yes" ]; then
    		local _bblue='\e[1;34m'
    		local _bwhite='\e[1;37m'
    		local _cclose='\e[0m'
  	fi
  	local _PREPAREDIR="${1}"
  	local _ROOTDIR="${2}"
  	local _REPOx86="${3}";
	local _REPOx64="${4}";

  	source PKGBUILD
  	echo -e "${_bwhite}[II] ${_bblue}=>${_cclose} Building ${_bwhite}${pkgname}${_cclose}"

  	if [[ ${arch} =~ any ]]; then
    		if [ ${_REPOx64} = true ]; then
    			echo -e "Build any package with staging-x86_64-build";
      			#LC_MESSAGES=C /usr/bin/sudo /usr/bin/extra-x86_64-build -r "${_ROOTDIR}" -c
      			LC_MESSAGES=C /usr/bin/sudo /usr/bin/staging-x86_64-build -r "${_ROOTDIR}" -c
    		else
    			echo -e "Build any package with staging-i686-build";
    			#LC_MESSAGES=C /usr/bin/sudo /usr/bin/extra-i686-build -r "${_ROOTDIR}" -c
    			LC_MESSAGES=C /usr/bin/sudo /usr/bin/staging-i686-build -r "${_ROOTDIR}" -c
    		fi;
  	else
		if [[ ${pkgname} =~ lib32 ]]; then
			echo -e "Build lib32 package";
      			LC_MESSAGES=C /usr/bin/sudo /usr/bin/multilib-build -r "${_ROOTDIR}" -c
    		else
      			if /usr/bin/grep 'lib32' PKGBUILD -q; then
      				if [ ${_REPOx64} = true ]; then
      					echo -e "Build lib32 package";
      					LC_MESSAGES=C /usr/bin/sudo /usr/bin/multilib-build -r "${_ROOTDIR}" -c
      				fi;
      				if [ ${_REPOx86} = true ]; then
      					echo -e "Build i686 package";
      					#LC_MESSAGES=C /usr/bin/sudo /usr/bin/extra-i686-build -r "${_ROOTDIR}" -c
      					LC_MESSAGES=C /usr/bin/sudo /usr/bin/staging-i686-build -r "${_ROOTDIR}" -c
      				fi;
      			else
      				if [ ${_REPOx64} = true ]; then
      					echo -e "Build x86_64 package";
      					#LC_MESSAGES=C /usr/bin/sudo /usr/bin/extra-x86_64-build -r "${_ROOTDIR}" -c
      					LC_MESSAGES=C /usr/bin/sudo /usr/bin/staging-x86_64-build -r "${_ROOTDIR}" -c
      				fi;
      				if [ ${_REPOx86} = true ]; then
      					echo -e "Build i686 package";
      					#LC_MESSAGES=C /usr/bin/sudo /usr/bin/extra-i686-build -r "${_ROOTDIR}" -c
      					LC_MESSAGES=C /usr/bin/sudo /usr/bin/staging-i686-build -r "${_ROOTDIR}" -c
      				fi;
      			fi
    		fi
  	fi
  	/usr/bin/cp *.pkg.tar.xz "${_PREPAREDIR}" 2> /dev/null
}

export -f func_build_new

CMD_FORCE="no"
CMD_NOCOLOR="no"
CONF_FILE="/etc/repo-scripts.conf"
# parametrs parsing
until [ -z ${1} ]; do
  case "${1}" in
    "-h" | "--help"    ) func_help                                                        ;;
    "-v" | "--version" ) func_ver                                                         ;;
    "-c"               ) [ -z "${2}" ] && error_mes "config" || CONF_FILE="${2}" && shift ;;
    "--nocolor"        ) CMD_NOCOLOR="yes"                                                ;;
    "-f" | "--force"   ) CMD_FORCE="yes"                                                  ;;
    *                  ) error_mes "flag"                                                 ;;
  esac
  shift
done
# default values
ARCHS="i686 x86_64"
DBNAME="custom"
LOCKFILE="/tmp/repo-update.lock"
PREPAREDIR="${HOME}/arch/prepare/"
REPODIR="${HOME}/arch/repo/"
ROOTDIR="${HOME}/arch/root/"
STAGINGDIR="${HOME}/arch/staging/"
SYMLINK="no"
USECOLOR="yes"
USEGPG="yes"
echo -e "[II] Reading configuration from '${CONF_FILE}'"
source "${CONF_FILE}"
[ "${CMD_NOCOLOR}" == "yes" ] && USECOLOR="no"
[ "${CMD_FORCE}" == "yes" ] && LOCKFILE=""
if [ "${USECOLOR}" == "yes" ]; then
  bblue='\e[1;34m'
  bwhite='\e[1;37m'
  cclose='\e[0m'
fi
export USECOLOR

# error checking
if [ ! -d "${PREPAREDIR}" ]; then
  [ -e "${PREPAREDIR}" ] && error_mes "file" "${PREPAREDIR}"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${PREPAREDIR}'${cclose}"
  /usr/bin/mkdir -p "${PREPAREDIR}" || error_mes "unknown"
fi
if [ ! -d "${REPODIR}" ]; then
  [ -e "${REPODIR}" ] && error_mes "file" "${REPODIR}"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${REPODIR}'${cclose}"
  /usr/bin/mkdir -p "${REPODIR}" || error_mes "unknown"
fi
for ARCH in ${ARCHS}; do
  if [ ! -d "${REPODIR}/${ARCH}" ]; then
    [ -e "${REPODIR}/${ARCH}" ] && error_mes "file" "${REPODIR}/${ARCH}"
    echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${REPODIR}/${ARCH}'${cclose}"
    /usr/bin/mkdir -p "${REPODIR}/${ARCH}" || error_mes "unknown"
  fi
done
if [ ! -d "${STAGINGDIR}" ]; then
  [ -e "${STAGINGDIR}" ] && error_mes "file" "${STAGINGDIR}"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${STAGINGDIR}'${cclose}"
  /usr/bin/mkdir -p "${STAGINGDIR}" || error_mes "unknown"
fi

# lock file
[ -e "${LOCKFILE}" ] && error_mes "lock"
/usr/bin/touch "${LOCKFILE}" 2> /dev/null || /usr/bin/true

## work block
# building
echo -e "${bwhite}[II]${cclose} Building packages"
cd "${STAGINGDIR}"
#/usr/bin/find -name 'PKGBUILD' -type f -execdir /usr/bin/bash -c "func_build "${PREPAREDIR}" "${ROOTDIR}"" \;
func_check_archs; #Check repository architectures
/usr/bin/find -name 'PKGBUILD' -type f -execdir /usr/bin/bash -c "func_build_new "${PREPAREDIR}" "${ROOTDIR}" "${REPOx86}" "${REPOx64}"" \;

# signing
if [ "${USEGPG}" == "yes" ]; then
  echo -e "${bwhite}[II]${cclose} Signing"
  cd "${PREPAREDIR}"
  for PACKAGE in $(/usr/bin/find . -name '*.pkg.tar.xz'); do
    /usr/bin/gpg -b "${PACKAGE}"
  done
fi

# creating packages list
cd "${PREPAREDIR}"
[[ "${ARCHS}" =~ "i686" ]] && i686_PACKAGES=$(/usr/bin/find . -name '*-i686.pkg.tar.xz' -o -name '*-any.pkg.tar.xz')
[[ "${ARCHS}" =~ "x86_64" ]] && x86_64_PACKAGES=$(/usr/bin/find . -name '*-x86_64.pkg.tar.xz' -o -name '*-any.pkg.tar.xz')
echo -e "${bwhite}[II] ${bblue}=>${cclose} i686 packages: \n${bwhite}${i686_PACKAGES}${cclose}"
echo -e "${bwhite}[II] ${bblue}=>${cclose} x86_64 packages: \n${bwhite}${x86_64_PACKAGES}${cclose}"

for ARCH in ${ARCHS}; do
  echo -e "${bwhite}[II]${cclose} Updating ${bwhite}${ARCH}${cclose} repo"
  cd "${REPODIR}/${ARCH}"
  [ "${ARCH}" == "i686" ] && PKGLIST="${i686_PACKAGES}" || PKGLIST="${x86_64_PACKAGES}"
  for PACKAGE in ${PKGLIST}; do
    PKGNAME=$(/usr/bin/package-query -p -f %n "${PREPAREDIR}/${PACKAGE}")
    for PKG in $(/usr/bin/find . -name "${PKGNAME}"'*.pkg.tar.xz'); do
      _PKGNAME=$(/usr/bin/package-query -p -f %n "${PKG}")
      [ "${PKGNAME}" == "${_PKGNAME}" ] && func_remove "${PKG}"
    done
    /usr/bin/cp "${PREPAREDIR}/${PACKAGE}" .
    [ "${USEGPG}" == "yes" ] && /usr/bin/cp "${PREPAREDIR}/${PACKAGE}.sig" .
    /usr/bin/repo-add "${DBNAME}.db.tar.gz" "${PACKAGE}"
    /usr/bin/repo-add --files "${DBNAME}.files.tar.gz" "${PACKAGE}"
  done
done

# creating symlinks
if [ "${SYMLINK}" == "yes" ]; then
  echo -e "${bwhite}[II]${cclose} Creating symlinks"
  if [ ! -d "${REPODIR}/non-versioned" ]; then
    [ -e "${REPODIR}/non-versioned" ] && error_mes "file" "${REPODIR}/non-versioned"
    echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${REPODIR}/non-versioned'${cclose}"
    /usr/bin/mkdir -p "${REPODIR}/non-versioned" || error_mes "unknown"
  fi
  cd "${REPODIR}/non-versioned"
  if [[ "${ARCHS}" =~ "i686" ]]; then
    for PACKAGE in ${i686_PACKAGES}; do
      PKGNAME=$(/usr/bin/package-query -p -f %n "${REPODIR}/i686/${PACKAGE}")
      /usr/bin/ln -sf "../i686/${PACKAGE}" "${PKGNAME}-i686.pkg.tar.xz"
    done
  fi
  if [[ "${ARCHS}" =~ "x86_64" ]]; then
    for PACKAGE in ${x86_64_PACKAGES}; do
      PKGNAME=$(/usr/bin/package-query -p -f %n "${REPODIR}/x86_64/${PACKAGE}")
      /usr/bin/ln -sf "../x86_64/${PACKAGE}" "${PKGNAME}-x86_64.pkg.tar.xz"
    done
  fi
fi

# clear
echo -e "${bwhite}[II]${cclose} Clear"
cd "${PREPAREDIR}"
/usr/bin/rm -rf *
cd "${STAGINGDIR}"
/usr/bin/rm -rf *
/usr/bin/rm -f "${LOCKFILE}"
