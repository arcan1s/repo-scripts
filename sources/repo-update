#!/bin/bash
#     repo-scripts is a set of scripts to work with your repository
#     Copyright (C) 2014 Evgeniy Alekseev
#
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, see http://www.gnu.org/licenses
#     or write to the Free Software Foundation,Inc., 51 Franklin Street,
#     Fifth Floor, Boston, MA 02110-1301  USA


# functions
error_mes() {
  if [[ ${USECOLOR} == "yes" ]]; then
    local _red='\e[0;31m'
    local _bwhite='\e[1;37m'
    local _cclose='\e[0m'
  fi
  case "${1}" in
    "config"    ) echo "${_red}[EE] ${_bwhite}Configuration file is not set${_cclose}"  ;;
    "file"      ) echo "${_red}[EE] ${_bwhite}'${2}' is a file${_cclose}"               ;;
    "flag"      ) echo "${_red}[EE] ${_bwhite}Unknown flag${_cclose}"                   ;;
    "lock"      ) echo "${_red}[EE] ${_bwhite}The process is already running${_cclose}" ;;
    "unknown"   ) echo "${_red}[EE] ${_bwhite}Unknown error${_cclose}"                  ;;
    "gpg"       ) echo "${_red}[EE] ${_bwhite}Sign gpg error${_cclose}"                 ;;
  esac
  exit 1
}
func_help() {
  echo -e "Script written on BASH for update custom repository"
  echo -e "\nUsage: repo-update [ -c /etc/repo-scripts.conf ] [ -n | --no-recreate ] [ --nocolor ]"
  echo -e "                   [ -f | --force ] [ -v | -- version ] [ -h | --help ]"
  echo -e "\nParametrs:"
  echo -e "  -c               PATH     - path to configuration file. Default is '/etc/repo-scripts.conf'"
  echo -e "  -n   --no-recreate        - No recreate the chroot"
  echo -e "       --nocolor            - force disable colors"
  echo -e "  -f   --force              - force if lock file exist"
  echo -e "\n  -v   --version            - show version and exit"
  echo -e "  -h   --help               - show this help and exit"
  exit 0
}
func_ver() {
  echo -e "                                   repo-update                                  "
  echo -e "A set of scripts to work with your repository                                   "
  echo -e "Version : 1.7.1                                                  License : GPLv3"
  echo -e "Author :                                             Evgeniy Alexeev aka arcanis"
  echo -e "E-mail :                                          esalexeev (at) gmail (dot) com"
  exit 0
}
func_remove() {
  local _PACKAGE="${1}"
  /usr/bin/rm -f "${_PACKAGE}"{,.sig}
}

CMD_FORCE="no"
CMD_NOCOLOR="no"
CONF_FILE="/etc/repo-scripts.conf"
# Recreate the chroot
RECHROOT="-c"
# parametrs parsing
until [ -z ${1} ]; do
  case "${1}" in
    "-h" | "--help"    ) func_help                                                        ;;
    "-v" | "--version" ) func_ver                                                         ;;
    "-c"               ) [ -z "${2}" ] && error_mes "config" || CONF_FILE="${2}" && shift ;;
    "--nocolor"        ) CMD_NOCOLOR="yes"                                                ;;
    "-f" | "--force"   ) CMD_FORCE="yes"                                                  ;;
    "-n" | "--no-recreate" ) RECHROOT=""                                                  ;;
    *                  ) error_mes "flag"                                                 ;;
  esac
  shift
done
# default values
ARCHS="i686 x86_64"
DBNAME="custom"
LOCKFILE="/tmp/repo-update.lock"
PREPAREDIR="${HOME}/arch/prepare"
REPODIR="${HOME}/arch/repo"
ROOTDIR="${HOME}/arch/root"
STAGINGDIR="${HOME}/arch/staging"
SYMLINK="no"
USECOLOR="yes"
USEGPG="yes"
TOOLSDEFAULT="/usr/bin/extra-i686-build"
TOOLSi686="/usr/bin/extra-i686-build"
TOOLSx86_64="/usr/bin/extra-x86_64-build"
TOOLSMULTILIB="/usr/bin/multilib-build"
echo -e "[II] Reading configuration from '${CONF_FILE}'"
source "${CONF_FILE}"
[[ ${CMD_NOCOLOR} == "yes" ]] && USECOLOR="no"
if [[ ${USECOLOR} == "yes" ]]; then
  bblue='\e[1;34m'
  bwhite='\e[1;37m'
  cclose='\e[0m'
fi
export USECOLOR

# error checking
if [ ! -d "${PREPAREDIR}" ]; then
  [ -e "${PREPAREDIR}" ] && error_mes "file" "${PREPAREDIR}"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${PREPAREDIR}'${cclose}"
  /usr/bin/mkdir -p "${PREPAREDIR}" || error_mes "unknown"
fi
if [ ! -d "${REPODIR}" ]; then
  [ -e "${REPODIR}" ] && error_mes "file" "${REPODIR}"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${REPODIR}'${cclose}"
  /usr/bin/mkdir -p "${REPODIR}" || error_mes "unknown"
fi
for ARCH in ${ARCHS}; do
  if [ ! -d "${REPODIR}/${ARCH}" ]; then
    [ -e "${REPODIR}/${ARCH}" ] && error_mes "file" "${REPODIR}/${ARCH}"
    echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${REPODIR}/${ARCH}'${cclose}"
    /usr/bin/mkdir -p "${REPODIR}/${ARCH}" || error_mes "unknown"
  fi
done
if [ ! -d "${STAGINGDIR}" ]; then
  [ -e "${STAGINGDIR}" ] && error_mes "file" "${STAGINGDIR}"
  echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${STAGINGDIR}'${cclose}"
  /usr/bin/mkdir -p "${STAGINGDIR}" || error_mes "unknown"
fi

# lock file
[[ ${CMD_FORCE} != "yes" ]] && [ -e "${LOCKFILE}" ] && error_mes "lock"
/usr/bin/touch "${LOCKFILE}" 2> /dev/null || /usr/bin/true

## Work block
# Building
echo -e "${bwhite}[II]${cclose} Building packages"
cd "${STAGINGDIR}"
# Get package list in staging folder
for PACKAGE in $(/usr/bin/find -name 'PKGBUILD' -type f); do
    cd "${STAGINGDIR}"
    # Get package folder
    cd $(dirname "${PACKAGE}")
    # Get PKGBUILD
    source PKGBUILD
    echo -e "${bwhite}[II] ${bblue}=>${cclose} Building ${bwhite}${pkgname}${cclose}"
    PKGARCHS="${arch[@]}"
    # Build if package is any architecture
    if [[ ${PKGARCHS} =~ any ]]; then
      echo -e "${bwhite}[III] ${bblue}=>${cclose} Build using default tools${cclose}";
      LC_MESSAGES=C /usr/bin/sudo ${TOOLSDEFAULT} -r ${ROOTDIR} ${RECHROOT}
    else
      # Build for repo architecture
      for ARCH in ${ARCHS}; do
        # Build for package architecture
        for _ARCHS in ${PKGARCHS}; do
          if [[ ${ARCH} == ${_ARCHS} ]]; then
            TOOLCHAIN="TOOLS${ARCH}"
            # Build if package is a lib32 type or depends of lib32 package or multilib package
            if [ ${ARCH} == "x86_64" ] && ( [[ ${pkgname} =~ lib32 ]] || /usr/bin/grep 'lib32' PKGBUILD -q || /usr/bin/grep 'multilib' PKGBUILD -q ); then
              echo -e "${bwhite}[III] ${bblue}=>${cclose} Build using multilib tools${cclose}";
              LC_MESSAGES=C /usr/bin/sudo ${TOOLSMULTILIB} -r ${ROOTDIR} ${RECHROOT}
            else
              echo -e "${bwhite}[III] ${bblue}=>${cclose} Build using ${ARCH} tools${cclose}";
              LC_MESSAGES=C /usr/bin/sudo ${!TOOLCHAIN} -r ${ROOTDIR} ${RECHROOT}
            fi
          fi
        done
      done
    fi
    # Copy build packages
    /usr/bin/cp *.pkg.tar.xz "${PREPAREDIR}" 2> /dev/null
done


# Signing
if [[ ${USEGPG} == "yes" ]]; then
  echo -e "${bwhite}[II]${cclose} Signing"
  cd "${PREPAREDIR}"
  for PACKAGE in $(/usr/bin/find . -name '*.pkg.tar.xz'); do
    PKGNAME=$(/usr/bin/package-query -p -f %n "${PACKAGE}")
    PGPKEYCMD="/usr/bin/gpg"
    PGPVAR="PGPKEY_${PKGNAME}"
    if [ ! -z "${!PGPVAR}" ]; then
      PGPKEYCMD+=" -u ${!PGPVAR}"
    elif [ ! -z "${PGPKEY}" ]; then
      PGPKEYCMD+=" -u ${PGPKEY}"
    fi
    "${PGPKEYCMD}" -b "${PACKAGE}" && echo "Signed ${PACKAGE}" || error_mes "gpg"
  done
fi

# Creating packages list for repo architecture
for ARCH in ${ARCHS}; do
  cd "${PREPAREDIR}"
  # Get list build packages in prepare folder
  PACKAGES=$(/usr/bin/find . -name "*-${ARCH}.pkg.tar.xz" -o -name '*-any.pkg.tar.xz')
  echo -e "${bwhite}[II] ${bblue}=>${cclose} ${ARCH} packages: \n${bwhite}${PACKAGES}${cclose}"
  echo -e "${bwhite}[II]${cclose} Updating ${bwhite}${ARCH}${cclose} repo"
  cd "${REPODIR}/${ARCH}"
  PKGLIST="${PACKAGES}"
  for PACKAGE in ${PKGLIST}; do
    PKGNAME=$(/usr/bin/package-query -p -f %n "${PREPAREDIR}/${PACKAGE}")
    for PKG in $(/usr/bin/find . -name "${PKGNAME}"'*.pkg.tar.xz'); do
      _PKGNAME=$(/usr/bin/package-query -p -f %n "${PKG}")
      [[ ${PKGNAME} == ${_PKGNAME} ]] && func_remove "${PKG}"
    done
    /usr/bin/cp "${PREPAREDIR}/${PACKAGE}" .
    [[ ${USEGPG} == "yes" ]] && /usr/bin/cp "${PREPAREDIR}/${PACKAGE}.sig" .
    /usr/bin/repo-add "${DBNAME}.db.tar.gz" "${PACKAGE}"
  done
  # Creating symlinks
  if [[ ${SYMLINK} == "yes" ]]; then
    echo -e "${bwhite}[II]${cclose} Creating symlinks"
    if [ ! -d "${REPODIR}/non-versioned" ]; then
      [ -e "${REPODIR}/non-versioned" ] && error_mes "file" "${REPODIR}/non-versioned"
      echo -e "${bwhite}[II] ${bblue}Creating directory ${bwhite}'${REPODIR}/non-versioned'${cclose}"
      /usr/bin/mkdir -p "${REPODIR}/non-versioned" || error_mes "unknown"
    fi
    cd "${REPODIR}/non-versioned"
    for PACKAGE in ${PACKAGES}; do
      PKGNAME=$(/usr/bin/package-query -p -f %n "${REPODIR}/${ARCH}/${PACKAGE}")
      /usr/bin/ln -sf "../${ARCH}/${PACKAGE}" "${PKGNAME}-${ARCH}.pkg.tar.xz"
    done
  fi
done

# clear
echo -e "${bwhite}[II]${cclose} Clear"
cd "${PREPAREDIR}"
/usr/bin/rm -rf *
cd "${STAGINGDIR}"
/usr/bin/rm -rf *
/usr/bin/rm -f "${LOCKFILE}"
